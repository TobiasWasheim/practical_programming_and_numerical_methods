0.1 0.0565993
0.2 0.102447
0.3 0.139077
0.4 0.167831
0.5 0.189878
0.6 0.206234
0.7 0.217784
0.8 0.225296
0.9 0.229435
1 0.230776
1.1 0.229814
1.2 0.226977
1.3 0.222632
1.4 0.21709
1.5 0.210621
1.6 0.203452
1.7 0.195774
1.8 0.18775
1.9 0.179516
2 0.171185
2.1 0.16285
2.2 0.154587
2.3 0.146459
2.4 0.138515
2.5 0.130794
2.6 0.123324
2.7 0.116129
2.8 0.109223
2.9 0.102617
3 0.0963164
3.1 0.0903222
3.2 0.0846333
3.3 0.0792458
3.4 0.0741535
3.5 0.069349
3.6 0.0648233
3.7 0.0605668
3.8 0.0565688
3.9 0.0528186
4 0.0493048
4.1 0.0460163
4.2 0.0429416
4.3 0.0400696
4.4 0.0373892
4.5 0.0348897
4.6 0.0325607
4.7 0.030392
4.8 0.0283739
4.9 0.0264971
5 0.0247527
5.1 0.0231321
5.2 0.0216274
5.3 0.0202307
5.4 0.018935
5.5 0.0177333
5.6 0.0166193
5.7 0.0155867
5.8 0.0146299
5.9 0.0137436
6 0.0129227
6.1 0.0121625
6.2 0.0114587
6.3 0.0108071
6.4 0.0102039
6.5 0.00964551
6.6 0.00912865
6.7 0.0086502
6.8 0.00820729
6.9 0.00779724
7 0.00741758
7.1 0.007066
7.2 0.00674037
7.3 0.00643871
7.4 0.00615919
7.5 0.00590012
7.6 0.00565993
7.7 0.00543717
7.8 0.0052305
7.9 0.0050387
8 0.00486062
8.1 0.00469522
8.2 0.00454151
8.3 0.00439862
8.4 0.00426572
8.5 0.00414205
8.6 0.00402692
8.7 0.00391969
8.8 0.00381976
8.9 0.00372661
9 0.00363972
9.1 0.00355863
9.2 0.00348294
9.3 0.00341224
9.4 0.00334618
9.5 0.00328444
9.6 0.0032267
9.7 0.00317269
9.8 0.00312214
9.9 0.00307482
10 0.00303051
10.1 0.002989
10.2 0.00295009
10.3 0.00291361
10.4 0.0028794
10.5 0.00284729
10.6 0.00281714
10.7 0.00278882
10.8 0.00276219
10.9 0.00273713
11 0.00271353
11.1 0.00269129
11.2 0.00267029
11.3 0.00265044
11.4 0.00263164
11.5 0.00261382
11.6 0.00259689
11.7 0.00258076
11.8 0.00256536
11.9 0.00255062
12 0.00253647
12.1 0.00252284
12.2 0.00250967
12.3 0.00249691
12.4 0.00248449
12.5 0.00247236
12.6 0.00246048
12.7 0.00244879
12.8 0.00243725
12.9 0.00242581
13 0.00241443
13.1 0.00240308
13.2 0.00239172
13.3 0.0023803
13.4 0.00236881
13.5 0.0023572
13.6 0.00234544
13.7 0.00233351
13.8 0.00232138
13.9 0.00230901
14 0.00229639
14.1 0.00228347
14.2 0.00227025
14.3 0.00225668
14.4 0.00224274
14.5 0.00222841
14.6 0.00221365
14.7 0.00219844
14.8 0.00218274
14.9 0.00216653
15 0.00214977
15.1 0.00213244
15.2 0.00211449
15.3 0.00209589
15.4 0.0020766
15.5 0.0020566
15.6 0.00203583
15.7 0.00201427
15.8 0.00199186
15.9 0.00196858
16 0.00194438
16.1 0.00191921
16.2 0.00189305
16.3 0.00186584
16.4 0.00183755
16.5 0.00180814
16.6 0.00177758
16.7 0.00174581
16.8 0.00171282
16.9 0.00167857
17 0.00164302
17.1 0.00160615
17.2 0.00156794
17.3 0.00152837
17.4 0.00148741
17.5 0.00144507
17.6 0.00140131
17.7 0.00135616
17.8 0.0013096
17.9 0.00126163
18 0.00121228
18.1 0.00116157
18.2 0.0011095
18.3 0.00105611
18.4 0.00100144
18.5 0.000945514
18.6 0.000888392
18.7 0.00083012
18.8 0.000770754
18.9 0.000710356
19 0.000648993
19.1 0.000586737
19.2 0.000523664
19.3 0.000459855
19.4 0.000395393
19.5 0.000330368
19.6 0.000264868
19.7 0.000198986
19.8 0.000132817
19.9 6.64567e-05

--------------------------------------------------------------------------------
Exam: Inverse Iteration - Implementation of Algorithm (part A)
--------------------------------------------------------------------------------

We have implemented the algorithm in the file 'inverseIteration.cpp'. In order  
to see if it works we test it by generating a random symmetrix 5x5 matrix and   
calculate the eigenvalue closest to the shift-value s = 1. In order to see if we
indeed get the correct eigenvalue we compare it to the eigenvalues obtained from
from our EVD-routine that was created in one of the homeworks.                  

The matrix which we generate is printed below:                                  

3.2 5.6 4.4 9.1 2.5 
5.6 0.8 3.9 0.1 5.8 
4.4 3.9 6.5 0.5 2 
9.1 0.1 0.5 8.9 5.1 
2.5 5.8 2 5.1 3.8 

next, the eigenvalue that we get from our inverse-iteration routine with a shift
value s = 1 is                                                                  

Eigenvalue = -7.87654 where s = -7         
Eigenvalue = -1.33322 where s = -1         
Eigenvalue = 3.13625 where s = 1           
Eigenvalue = 8.21527 where s = 7           
Eigenvalue = 21.0578 where s = 20         

In order to see if we get the correct eigenvalue we compare it to the eigen-    
values which we obtain by computing the diagonal matrix from our EVD routine.   
The diagonal matrix can be seen below.                                          

D =                                                                              
-7.87656 0 0 0 0 
0 -1.33322 0 0 0 
0 0 3.13665 0 0 
0 0 0 8.21527 0 
0 0 0 0 21.0578 

When we look at the diagonal matrix we see that we get eigenvalues that are     
close to the eigenvalues from the inverse iteration method.                     

Additionally, the algorithm also gives the eigenvectors. Below we have printed  
the eigenvectors for all eigenvalues. Column 1 corresponds to the first eigenvalue,
column 2 corresponds to the second eigenvalue and so on....

0.585333 0.546318 0.258145 0.0420649 0.536174 
-0.588462 0.515366 -0.36606 -0.384366 0.327553 
-0.0552516 -0.440579 0.487103 -0.683893 0.324563 
-0.422057 -0.261946 0.190913 0.613137 0.584331 
0.360434 -0.416184 -0.725013 -0.0827416 0.398049 

Now, we compare these eigenvectors to the result of the EVD routine. From that we 
we get the eigenvectors                                                          

0.584528 0.546449 0.265464 0.0420325 0.536174 
-0.589207 0.515189 -0.363828 -0.384389 0.32755 
-0.0546229 -0.440403 0.479586 -0.683901 0.324559 
-0.421682 -0.261907 0.190336 0.613118 0.584335 
0.361057 -0.416442 -0.728648 -0.0827303 0.398048 

Which we can see are numerically close the the result from our EVD routine! Based on
our tests, we conclude that our reverse iteration method works.


--------------------------------------------------------------------------------
Exam: Inverse Iteration - Application to schrodinger's equation (part B)
--------------------------------------------------------------------------------

In this part we apply our routine to find the energy-eigenvalue closest to -1 which
we excpect to be the one with the lowest energy E0 = -0.5. We print the eigenvalue 
below.                                                                             

E0 = -0.498324 where s = -1.0                                                     
E1 = -0.124909 where s = -0.3                                                     
E2 = -0.0498961 where s = -0.05                                                     
E2 = -0.0498961 where s = -0.03                                                     

We see that we get the eigenvalue that matches (almost) ground state energy. To    
build the Hamiltonian we used the same procedure as the EVD homework part B.       


--------------------------------------------------------------------------------
Exam: Inverse Iteration - Timing of the algorithm (part C)
--------------------------------------------------------------------------------

In this part we've timed the algorithm and the EVD routine which can be seen at 
'plots/timing.svg/' where we can see that both algorithms goes as O(N^3).       
