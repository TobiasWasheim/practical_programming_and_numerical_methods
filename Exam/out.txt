--------------------------------------------------------------------------------
Exam: Inverse Iteration - Implementation of Algorithm (part A)
--------------------------------------------------------------------------------

We have implemented the algorithm in the file 'inverseIteration.cpp'. In order  
to see if it works we test it by generating a random symmetrix 5x5 matrix and   
calculate the eigenvalue closest to the shift-value s = 1. In order to see if we
indeed get the correct eigenvalue we compare it to the eigenvalues obtained from
from our EVD-routine that was created in one of the homeworks.                  

The matrix which we generate is printed below:                                  

3.2 5.6 4.4 9.1 2.5 
5.6 0.8 3.9 0.1 5.8 
4.4 3.9 6.5 0.5 2 
9.1 0.1 0.5 8.9 5.1 
2.5 5.8 2 5.1 3.8 

next, the eigenvalue that we get from our inverse-iteration routine with a shift
value s = 1 is                                                                  

Eigenvalue = -7.87654 where s = -7         
Eigenvalue = -1.33322 where s = -1         
Eigenvalue = 3.13625 where s = 1           
Eigenvalue = 8.21527 where s = 7           
Eigenvalue = 21.0578 where s = 20         

In order to see if we get the correct eigenvalue we compare it to the eigen-    
values which we obtain by computing the diagonal matrix from our EVD routine.   
The diagonal matrix can be seen below.                                          

D =                                                                              
-7.87656 0 0 0 0 
0 -1.33322 0 0 0 
0 0 3.13665 0 0 
0 0 0 8.21527 0 
0 0 0 0 21.0578 

When we look at the diagonal matrix we see that we get eigenvalues that are     
close to the eigenvalues from the inverse iteration method.                     

Additionally, the algorithm also gives the eigenvectors. Below we have printed  
the eigenvectors for all eigenvalues. Column 1 corresponds to the first eigenvalue,
column 2 corresponds to the second eigenvalue and so on....

0.585333 0.546318 0.258145 0.0420649 0.536174 
-0.588462 0.515366 -0.36606 -0.384366 0.327553 
-0.0552516 -0.440579 0.487103 -0.683893 0.324563 
-0.422057 -0.261946 0.190913 0.613137 0.584331 
0.360434 -0.416184 -0.725013 -0.0827416 0.398049 

Now, we compare these eigenvectors to the result of the EVD routine. From that we 
we get the eigenvectors                                                          

0.584528 0.546449 0.265464 0.0420325 0.536174 
-0.589207 0.515189 -0.363828 -0.384389 0.32755 
-0.0546229 -0.440403 0.479586 -0.683901 0.324559 
-0.421682 -0.261907 0.190336 0.613118 0.584335 
0.361057 -0.416442 -0.728648 -0.0827303 0.398048 

Which we can see are numerically close the the result from our EVD routine! Based on
our tests, we conclude that our reverse iteration method works.


--------------------------------------------------------------------------------
Exam: Inverse Iteration - Application to schrodinger's equation (part B)
--------------------------------------------------------------------------------

In this part we apply our routine to find the energy-eigenvalue for the ground-state,
first, and second excited state. From theory we expect that E0 = -1/2 = 0.5, and that
E1 = -1/(2*2^2) = -1/8 = 0.125 and E2 = -1/(2*3^2) = -1/18 = -0.0588... The results  
are printed below.                                                                   

E0 = -0.498324 where s = -1.0                                                     
E1 = -0.124909 where s = -0.3                                                     
E2 = -0.0498961 where s = -0.05                                                     

We see that we get the eigenvalue that matches (almost) energies of the ground state
and the excited states for E1 and E2. We have also plotted the s-wave function for  
the ground state at 'plots/psi.svg/' and compared to the analytical wave function.  
We have built the Hamiltonian using the same procedure as the EVD homework part B.  


--------------------------------------------------------------------------------
Exam: Inverse Iteration - Timing of the algorithm (part C)
--------------------------------------------------------------------------------

In this part we've timed the algorithm and the EVD routine which can be seen at 
'plots/timing.svg/' where we can see that both algorithms goes as O(N^3).       
