Value of gaussian integral: 0.886829
---------------------------------------------
Homework: Integration - part A
---------------------------------------------

In part A I have implemented the open-4 Gauss
quadrature. To test that it works, I have    
used it to evaluate the four integrals given 
in part A.                                   

integral of sqrt(x) from 0 to 1       = 0.672681
integral of 1/sqrt(x) from 0 to 1     = 2.01881
integral of sqrt(1-x*x) from 0 to 1   = 3.15286
integral of ln(x)/sqrt(x) from 0 to 1 = -4.03168

The accuracy is 0.01 so comparing to the
analytical results, we see that the     
accuracy of the numerical result is on  
correct magnitude.                      

Next, we plot the error function. This  
plot can be seen at plots/erfValue.svg. 

At last, we calculate erf(1) for        
different accuracies. I have plotted on 
log-log scale the accuracy vs. the      
absolute difference between the         
numerical and exact result at           
plots/erfPrecision.svg.                 
---------------------------------------------
Homework: Integration - part B
---------------------------------------------

In part B I have implemented the Clenshaw-   
Curtis open-4 quadrature. Calculating some   
interesting integrals:                       

integral of 1/sqrt(x) from 0 to 1 = 1.98857
integral of ln(x)/sqrt(x) from 0 to 1 = -3.97256

In part A we calculated the same integrals with
the no variable transformation. Comparing the  
the number of integrand evalulations we get that
that for the first integral the Clenshaw-Curtis 
has 17 iterations and the second
integral has 173 iterations.
The open-4 non-transformation for the first integral
has 17155 iterations and the second
integral has 19377 iterations.

Comparing to the number of iterations that Scipy has go
to go through (is printed at the bottom under part C)
we see that the number of iterations to integrate ln(x)/sqrt(x)
is roughly 230. So our Clenshaw-Curits open4 integrator uses fewer
iterations for this integral than Python scipy.integrate.

Next, I have implemented infinite limits. To test the integrator
with infinite limits, I have integrated the gaussian function
f(x) = exp(-x*x).

from -infy to +infy = 0.781289
from 0 to +infy     = 0.886829
from -infy to 0     = 0.886829

The analytical result from -infy to infy is sqrt(pi) = 1.77.... From 0
to +infy or -infy to 0 is sqrt(pi)/2 = 0.88....
So we get the correct result in our test when using our integrator with infinite limits.

Comparing with scipy's integrator routine, we get that the number of iterations for our gaussian
integral is 1. For scipy's integrator it uses roughly 90 iterations to compute the integral
of the Gaussian integral.

Python output:
Number of iterations using SciPy's integrate for non-infinte limits: 231
Number of iterations using SciPy's integrate for gaussian function : 90
