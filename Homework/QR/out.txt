--------------------------------------------------------------------------------
Homework: QR - part A
--------------------------------------------------------------------------------

In part A we check that our methods for QR-decomposition and solving a linear   
set of equations. We check that decomp(A) and solve(Q,R,b) works as intended. To
check that the methods work we start by generating a random tall mxn matrix A   
where m > n. This matrix is printed below. Each entry has a value between 1.0   
and 10.0.                                                                       

3.9 8.1 
3.9 3.3 
2.4 3.4 
6.7 1.1 
9.6 4.9 
1.6 7.3 
6.5 9.6 
9.4 2 
1.8 2.2 
4.9 9 

The next step is to decompose the matrix into Q and R. We apply our method.     
Below we print the matrix Q and R. Since there might be small numerical errors  
not all below the diagonal elements might not be exactly equal to zero.         

Q =                                                                             
0.21351 0.405826 
0.21351 0.0313257 
0.131391 0.126106 
0.3668 -0.302679 
0.525564 -0.174358 
0.087594 0.476776 
0.355851 0.372095 
0.514615 -0.389021 
0.0985433 0.0672721 
0.268257 0.418059 

R =                                                                             
18.2661 13.5754 
0 12.8171 

In order for the method to work properly R must be upper triangular which it is.
Next, we check that Q^T * Q = I. For this we print the matrix product Q^T * Q.  
Since there might be small numerical errors and non-diagonal elements may not   
exactly be equal to zero, but close!                                            

I = Q^T * Q =                                                                   
1 -2.63678e-16 
-2.63678e-16 1 

Finally, at last we see if A = Q * R. We print A below as the product of Q and R

A = Q * R =                                                                     
3.9 8.1 
3.9 3.3 
2.4 3.4 
6.7 1.1 
9.6 4.9 
1.6 7.3 
6.5 9.6 
9.4 2 
1.8 2.2 
4.9 9 

Next we check that the method solve(Q,R,b) works as intended. We generate a     
random 5x5 matrix with elements between 1.0 and 10.0. It can be seen below.     

8.1 5.9 8 7.2 4 
3.7 4.9 3.7 5.5 10 
8.4 3.2 2.7 6.1 5.5 
4.2 3.3 2 8.3 2.7 
9.9 8.9 3.8 1.1 3.2 

We also generate a random column vector of size 5 and solve M * x = b. The      
vector b and solution x is printed below.                                       

b =                                                                             
7.5
4
2.5
7.6
9.9

x =                                                                             
-0.382736
1.79605
-0.297295
0.659124
-0.590973

In order to check that it is the correct solution we compute M * x and see if it
it is equal to b.                                                               

M * x =                                                                         
7.5
4
2.5
7.6
9.9

Comparing it to b we see that it is the same and therefor our methods works.    


--------------------------------------------------------------------------------
Homework: QR - part B
--------------------------------------------------------------------------------

In part B we check that the method inverse(matrix A) for a square matrix works. 
We generate a random 5x5 square matrix A.                                       

A =                                                                             
6.9 6.2 5.8 4.7 7.2 
3.6 7.4 5.9 6.3 2.7 
5.8 4.5 9 2.3 4.4 
4.3 9.5 6.7 9.4 2.5 
3.2 9.1 1.2 6.1 4 

Next, we apply the method inverse(A) to calculate the inverse of A. It is       
printed below.                                                                  

A^-1 =                                                                          
-0.247515 -2.8802 0.850232 1.51788 0.505732 
-0.2826 -0.232705 0.287827 0.000441329 0.348871 
0.0247965 0.906045 -0.142381 -0.438411 -0.225588 
0.268306 0.37954 -0.394757 0.0207129 -0.317853 
0.424322 1.98295 -0.690272 -1.11537 -0.395865 
To check that the method works, we calculate A * A^-1 to see if it is equal to  
the identity matrix. There might be numerical errors so the off-diagonal        
elements that are not exactly equal to zero, but close.                         

1 0 8.88178e-16 0 -8.88178e-16 
-2.88658e-15 1 -6.66134e-16 -4.44089e-16 -1.11022e-15 
8.88178e-16 -1.77636e-15 1 8.88178e-16 1.77636e-15 
8.88178e-16 -3.55271e-15 1.77636e-15 1 1.88738e-15 
4.44089e-16 -2.66454e-15 1.33227e-15 1.77636e-15 1 

As we can see, we get the identity matrix so our method works.                  

--------------------------------------------------------------------------------
Homework: QR - part C
--------------------------------------------------------------------------------

In part C we measure the time it takes to QR factorize a NxN matrix and show    
that it is proportional to O(N^3). To do so we have plotted the QR factorization
for NxN matricies. On the plot we see that at log(N) = 5, log(Time) = -3 and at 
log(N) = 6, log(Time) = 0. By rough estimation, we can approximate the slope to 
be a = (-3 - 0) / (5 - 6) = 3 which is the same as saying that the time         
complexity is O(N^3).                                                           
